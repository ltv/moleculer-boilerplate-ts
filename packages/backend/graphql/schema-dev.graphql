# An object with a globally unique `ID`.
interface Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
}

# A connection to a list of `Config` values.
type ConfigsConnection {
  # A list of `Config` objects.
  nodes: [Config]!

  # A list of edges which contains the `Config` and cursor to aid in pagination.
  edges: [ConfigsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Config` you could get from the connection.
  totalCount: Int!
}

type Config implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  key: String!
  value: String!
  isDefault: Boolean!
  createdAt: Datetime
  updatedAt: Datetime
}

# A point in time as described by the [ISO
# 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
scalar Datetime

# A `Config` edge in the connection.
type ConfigsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Config` at the end of the edge.
  node: Config
}

# A location in a connection that can be used for resuming pagination.
scalar Cursor

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: Cursor

  # When paginating forwards, the cursor to continue.
  endCursor: Cursor
}

# Methods to use when ordering `Config`.
enum ConfigsOrderBy {
  NATURAL
  KEY_ASC
  KEY_DESC
  VALUE_ASC
  VALUE_DESC
  IS_DEFAULT_ASC
  IS_DEFAULT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A condition to be used against `Config` object types. All fields are tested for equality and combined with a logical ‘and.’
input ConfigCondition {
  # Checks for equality with the object’s `key` field.
  key: String

  # Checks for equality with the object’s `value` field.
  value: String

  # Checks for equality with the object’s `isDefault` field.
  isDefault: Boolean

  # Checks for equality with the object’s `createdAt` field.
  createdAt: Datetime

  # Checks for equality with the object’s `updatedAt` field.
  updatedAt: Datetime
}

# A filter to be used against `Config` object types. All fields are combined with a logical ‘and.’
input ConfigFilter {
  # Filter by the object’s `key` field.
  key: StringFilter

  # Filter by the object’s `value` field.
  value: StringFilter

  # Filter by the object’s `isDefault` field.
  isDefault: BooleanFilter

  # Filter by the object’s `createdAt` field.
  createdAt: DatetimeFilter

  # Filter by the object’s `updatedAt` field.
  updatedAt: DatetimeFilter

  # Checks for all expressions in this list.
  and: [ConfigFilter!]

  # Checks for any expressions in this list.
  or: [ConfigFilter!]

  # Negates the expression.
  not: ConfigFilter
}

# A filter to be used against String fields. All fields are combined with a logical ‘and.’
input StringFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: String

  # Not equal to the specified value.
  notEqualTo: String

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: String

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: String

  # Included in the specified list.
  in: [String!]

  # Not included in the specified list.
  notIn: [String!]

  # Less than the specified value.
  lessThan: String

  # Less than or equal to the specified value.
  lessThanOrEqualTo: String

  # Greater than the specified value.
  greaterThan: String

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: String

  # Contains the specified string (case-sensitive).
  includes: String

  # Does not contain the specified string (case-sensitive).
  notIncludes: String

  # Contains the specified string (case-insensitive).
  includesInsensitive: String

  # Does not contain the specified string (case-insensitive).
  notIncludesInsensitive: String

  # Starts with the specified string (case-sensitive).
  startsWith: String

  # Does not start with the specified string (case-sensitive).
  notStartsWith: String

  # Starts with the specified string (case-insensitive).
  startsWithInsensitive: String

  # Does not start with the specified string (case-insensitive).
  notStartsWithInsensitive: String

  # Ends with the specified string (case-sensitive).
  endsWith: String

  # Does not end with the specified string (case-sensitive).
  notEndsWith: String

  # Ends with the specified string (case-insensitive).
  endsWithInsensitive: String

  # Does not end with the specified string (case-insensitive).
  notEndsWithInsensitive: String

  # Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  like: String

  # Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  notLike: String

  # Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  likeInsensitive: String

  # Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  notLikeInsensitive: String

  # Equal to the specified value (case-insensitive).
  equalToInsensitive: String

  # Not equal to the specified value (case-insensitive).
  notEqualToInsensitive: String

  # Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  distinctFromInsensitive: String

  # Equal to the specified value, treating null like an ordinary value (case-insensitive).
  notDistinctFromInsensitive: String

  # Included in the specified list (case-insensitive).
  inInsensitive: [String!]

  # Not included in the specified list (case-insensitive).
  notInInsensitive: [String!]

  # Less than the specified value (case-insensitive).
  lessThanInsensitive: String

  # Less than or equal to the specified value (case-insensitive).
  lessThanOrEqualToInsensitive: String

  # Greater than the specified value (case-insensitive).
  greaterThanInsensitive: String

  # Greater than or equal to the specified value (case-insensitive).
  greaterThanOrEqualToInsensitive: String
}

# A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
input BooleanFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: Boolean

  # Not equal to the specified value.
  notEqualTo: Boolean

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: Boolean

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: Boolean

  # Included in the specified list.
  in: [Boolean!]

  # Not included in the specified list.
  notIn: [Boolean!]

  # Less than the specified value.
  lessThan: Boolean

  # Less than or equal to the specified value.
  lessThanOrEqualTo: Boolean

  # Greater than the specified value.
  greaterThan: Boolean

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: Boolean
}

# A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
input DatetimeFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: Datetime

  # Not equal to the specified value.
  notEqualTo: Datetime

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: Datetime

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: Datetime

  # Included in the specified list.
  in: [Datetime!]

  # Not included in the specified list.
  notIn: [Datetime!]

  # Less than the specified value.
  lessThan: Datetime

  # Less than or equal to the specified value.
  lessThanOrEqualTo: Datetime

  # Greater than the specified value.
  greaterThan: Datetime

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: Datetime
}

# A connection to a list of `Profile` values.
type ProfilesConnection {
  # A list of `Profile` objects.
  nodes: [Profile]!

  # A list of edges which contains the `Profile` and cursor to aid in pagination.
  edges: [ProfilesEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Profile` you could get from the connection.
  totalCount: Int!
}

type Profile implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: Int!
  userId: String!
  email: String
  displayName: String
  photoUrl: String
  address: String
}

# A `Profile` edge in the connection.
type ProfilesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Profile` at the end of the edge.
  node: Profile
}

# Methods to use when ordering `Profile`.
enum ProfilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  PHOTO_URL_ASC
  PHOTO_URL_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A condition to be used against `Profile` object types. All fields are tested for equality and combined with a logical ‘and.’
input ProfileCondition {
  # Checks for equality with the object’s `id` field.
  id: Int

  # Checks for equality with the object’s `userId` field.
  userId: String

  # Checks for equality with the object’s `email` field.
  email: String

  # Checks for equality with the object’s `displayName` field.
  displayName: String

  # Checks for equality with the object’s `photoUrl` field.
  photoUrl: String

  # Checks for equality with the object’s `address` field.
  address: String
}

# A filter to be used against `Profile` object types. All fields are combined with a logical ‘and.’
input ProfileFilter {
  # Filter by the object’s `id` field.
  id: IntFilter

  # Filter by the object’s `userId` field.
  userId: StringFilter

  # Filter by the object’s `email` field.
  email: StringFilter

  # Filter by the object’s `displayName` field.
  displayName: StringFilter

  # Filter by the object’s `photoUrl` field.
  photoUrl: StringFilter

  # Filter by the object’s `address` field.
  address: StringFilter

  # Checks for all expressions in this list.
  and: [ProfileFilter!]

  # Checks for any expressions in this list.
  or: [ProfileFilter!]

  # Negates the expression.
  not: ProfileFilter
}

# A filter to be used against Int fields. All fields are combined with a logical ‘and.’
input IntFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: Int

  # Not equal to the specified value.
  notEqualTo: Int

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: Int

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: Int

  # Included in the specified list.
  in: [Int!]

  # Not included in the specified list.
  notIn: [Int!]

  # Less than the specified value.
  lessThan: Int

  # Less than or equal to the specified value.
  lessThanOrEqualTo: Int

  # Greater than the specified value.
  greaterThan: Int

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: Int
}

# The output of our create `Config` mutation.
type CreateConfigPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Config` that was created by this mutation.
  config: Config

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Config`. May be used by Relay 1.
  configEdge(
    # The method to use when ordering `Config`.
    orderBy: [ConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConfigsEdge
}

# All input for the create `Config` mutation.
input CreateConfigInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The `Config` to be created by this mutation.
  config: ConfigInput!
}

# An input for mutations affecting `Config`
input ConfigInput {
  key: String!
  value: String!
  isDefault: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

# The output of our create `Profile` mutation.
type CreateProfilePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Profile` that was created by this mutation.
  profile: Profile

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Profile`. May be used by Relay 1.
  profileEdge(
    # The method to use when ordering `Profile`.
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

# All input for the create `Profile` mutation.
input CreateProfileInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The `Profile` to be created by this mutation.
  profile: ProfileInput!
}

# An input for mutations affecting `Profile`
input ProfileInput {
  id: Int
  userId: String!
  email: String
  displayName: String
  photoUrl: String
  address: String
}

# The output of our update `Config` mutation.
type UpdateConfigPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Config` that was updated by this mutation.
  config: Config

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Config`. May be used by Relay 1.
  configEdge(
    # The method to use when ordering `Config`.
    orderBy: [ConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConfigsEdge
}

# All input for the `updateConfig` mutation.
input UpdateConfigInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Config` to be updated.
  nodeId: ID!

  # An object where the defined keys will be set on the `Config` being updated.
  configPatch: ConfigPatch!
}

# Represents an update to a `Config`. Fields that are set will be updated.
input ConfigPatch {
  key: String
  value: String
  isDefault: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

# All input for the `updateConfigByKey` mutation.
input UpdateConfigByKeyInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # An object where the defined keys will be set on the `Config` being updated.
  configPatch: ConfigPatch!
  key: String!
}

# The output of our update `Profile` mutation.
type UpdateProfilePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Profile` that was updated by this mutation.
  profile: Profile

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Profile`. May be used by Relay 1.
  profileEdge(
    # The method to use when ordering `Profile`.
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

# All input for the `updateProfile` mutation.
input UpdateProfileInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Profile` to be updated.
  nodeId: ID!

  # An object where the defined keys will be set on the `Profile` being updated.
  profilePatch: ProfilePatch!
}

# Represents an update to a `Profile`. Fields that are set will be updated.
input ProfilePatch {
  id: Int
  userId: String
  email: String
  displayName: String
  photoUrl: String
  address: String
}

# All input for the `updateProfileById` mutation.
input UpdateProfileByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # An object where the defined keys will be set on the `Profile` being updated.
  profilePatch: ProfilePatch!
  id: Int!
}

# The output of our delete `Config` mutation.
type DeleteConfigPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Config` that was deleted by this mutation.
  config: Config
  deletedConfigId: ID

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Config`. May be used by Relay 1.
  configEdge(
    # The method to use when ordering `Config`.
    orderBy: [ConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConfigsEdge
}

# All input for the `deleteConfig` mutation.
input DeleteConfigInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Config` to be deleted.
  nodeId: ID!
}

# All input for the `deleteConfigByKey` mutation.
input DeleteConfigByKeyInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String
  key: String!
}

# The output of our delete `Profile` mutation.
type DeleteProfilePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Profile` that was deleted by this mutation.
  profile: Profile
  deletedProfileId: ID

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Profile`. May be used by Relay 1.
  profileEdge(
    # The method to use when ordering `Profile`.
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

# All input for the `deleteProfile` mutation.
input DeleteProfileInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Profile` to be deleted.
  nodeId: ID!
}

# All input for the `deleteProfileById` mutation.
input DeleteProfileByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String
  id: Int!
}
